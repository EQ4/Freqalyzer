#include <fmod/fmod.h>
#include <fmod/fmod_errors.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>

#define LARGEUR_SURFACE		256
#define HAUTEUR_SURFACE		400
#define RATIO			(HAUTEUR_SURFACE / 255.0)
#define REFRESHING_TIME		25
#define SPECTRUM_SIZE		256

//Déclaration des prototypes
void setPixel(SDL_Surface *surface, int x, int y, Uint32 pixel);

//Fonction principale
int main(int argc, char *argv[])
{
	int att = 1, heightbar = 0, current_time = 0, past_time = 0, i = 0, j = 0;
	int size;
	int spectre[SPECTRUM_SIZE];
	float volume;

	SDL_Event event;
	SDL_Surface *ecran = NULL, *fond = NULL, *spectrum = NULL;
	SDL_Rect pos_fond, pos_spect;

	printf("Démarrage de Freqalyzer\n");

	//Déclaratin des variables FMOD

	FMOD_SYSTEM *system;
	FMOD_SOUND *sound;
	FMOD_CHANNEL *channel = 0;
	FMOD_RESULT result;
	FMOD_BOOL state;
	FMOD_DSP *dsp;

	void *extradriverdata = 0;

	//Position des surfaces
	pos_fond.x = 0;
	pos_fond.y = 0;
	pos_spect.x = 100;
	pos_spect.y = 150;

	//Chargement en mémoire du système d'affichage SDL - Vidéo
	SDL_Init(SDL_INIT_VIDEO);

	if(SDL_Init(SDL_INIT_VIDEO) == -1)
	{
		fprintf(stderr, "Erreur d'initialisation de la SDL");
		exit(EXIT_FAILURE);
	}

	//Paramétrage et ouverture de la fenêtre
	ecran =  SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);

	spectrum = SDL_CreateRGBSurface(SDL_HWSURFACE, 600, 350, 32, 0, 0, 0, 0);

	//Titrage de la fenêtre
	SDL_WM_SetCaption("Freqalyzer", NULL);

	//Chargement de l'image de fond
	fond = IMG_Load("../pictures/fond.jpg");

	//Allocation de mémoire à system
	result = FMOD_System_Create(&system);

	//Initialisation
	result = FMOD_System_Init(system, 32, FMOD_INIT_NORMAL, extradriverdata);

	//Chargement du son
	result = FMOD_System_CreateSound(system, "../sounds/gameofthrones.mp3", FMOD_2D | FMOD_CREATESTREAM, 0, &sound);

	SDL_EnableKeyRepeat(SDL_DEFAULT_REPEAT_DELAY, SDL_DEFAULT_REPEAT_INTERVAL);


	while(att)
	{
		SDL_PollEvent(&event);
		switch(event.type)
		{
			case SDL_QUIT:
				att = 0;
				break;
			case SDL_KEYDOWN:
					switch (event.key.keysym.sym)
					{
					case SDLK_ESCAPE: //Sortie
 						att = 0;
						break;
					case SDLK_SPACE: //Lecture
						result=FMOD_System_PlaySound(system, sound, 0, 0, &channel);
 						FMOD_Channel_GetVolume(channel, &volume);
						FMOD_Channel_SetVolume(channel, volume);
						unsigned int length;
						FMOD_Sound_GetLength(sound, &length, FMOD_TIMEUNIT_MS);
						break;
					case SDLK_UP: //Augmenter le volume
						printf("\nLa valeur du volume est : %f", volume);
						if(volume < 1)
							volume += 0.1;
						else if(volume > 1)
							volume = 1;
						FMOD_Channel_SetVolume(channel, volume);
						break;
					case SDLK_DOWN:
						printf("\nLa valeur du volume est : %f", volume);
						if(volume > 0)
							volume -= 0.1;
						else if(volume < 0)
							volume = 0;
						FMOD_Channel_SetVolume(channel, volume);
						break;
					case SDLK_s: //Arrêt
 						FMOD_Channel_Stop(channel);
						break;
					case SDLK_p: //Pause
						FMOD_Channel_GetPaused(channel, &state);
						printf("La pause est : %d", state);
						if(state)
						{
							SDL_Delay(250);
							FMOD_Channel_SetPaused(channel, 0);
						}
						else
						{
							SDL_Delay(250);
							FMOD_Channel_SetPaused(channel, 1);
						}
						break;
					default:
						break;
					}
			default:
				break;
		}

		//Effacement de la surface du spectre avant affichage
		SDL_FillRect(spectrum, NULL, SDL_MapRGB(ecran->format, 0, 0, 0));

		//Gestion du temps
		current_time = SDL_GetTicks();

		if((current_time - past_time) < 25)
			SDL_Delay(25 - (current_time - past_time));

		past_time = SDL_GetTicks();

/*		GetNumParameters(dsp, spectre);
		FMOD_DSP_GetParameterData(dsp, int index, sound, *length, char *valuestr, int valuestrlen);

		//Verrouillage d'une surface afin de manipuler pixel par pixel
		SDL_LockSurface(spectrum);

		/* BOUCLE 1 : on parcourt la fenêtre en largeur (pour chaque barre verticale) */
/*		for (i = 0 ; i < LARGEUR_SURFACE ; i++)
		{
			heightbar = spectre[i] * 20 * HAUTEUR_SURFACE;

			if (heightbar > HAUTEUR_SURFACE)
				heightbar = HAUTEUR_SURFACE;

			/* BOUCLE 2 : on parcourt en hauteur la barre verticale pour la dessiner */
/*			for (j = HAUTEUR_SURFACE - heightbar ; j < HAUTEUR_SURFACE ; j++)
				setPixel(spectrum, i, j, SDL_MapRGB(ecran->format, 255 - (j / RATIO), j / RATIO, 0));
		}

		//Déblocage de la surface après travaille dessus
        	SDL_UnlockSurface(spectrum);

*/
		//Affichage des surfaces
		SDL_BlitSurface(fond, NULL, ecran, &pos_fond);
		SDL_BlitSurface(spectrum, NULL, ecran, &pos_spect);

		//Rafraîchissement de la fenêtre
		SDL_Flip(ecran);
		FMOD_System_Update(system);

	}

	//Fermeture et libération de l'objet system en mémoire
	FMOD_Sound_Release(sound);
	FMOD_System_Close(system);
	FMOD_System_Release(system);

	SDL_FreeSurface(spectrum);
	SDL_FreeSurface(fond);
	SDL_Quit();

	return EXIT_SUCCESS;
}

void setPixel(SDL_Surface *surface, int x, int y, Uint32 pixel)
{
	int bpp = surface->format->BytesPerPixel;

	Uint8 *p = (Uint8 *)surface->pixels + y * surface->pitch + x * bpp;

	switch(bpp)
	{
	case 1:
		*p = pixel;
		break;

	case 2:
		*(Uint16 *)p = pixel;
		break;

	case 3:
        	if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
		{
			p[0] = (pixel >> 16) & 0xff;
			p[1] = (pixel >> 8) & 0xff;
			p[2] = pixel & 0xff;
		}else
		{
			p[0] = pixel & 0xff;
			p[1] = (pixel >> 8) & 0xff;
			p[2] = (pixel >> 16) & 0xff;
		}
		break;

	case 4:
		*(Uint32 *)p = pixel;
		break;
	}
}
